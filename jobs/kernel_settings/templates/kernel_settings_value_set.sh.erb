#!/bin/bash

set -u # report the usage of uninitialized variables

JOB_NAME="kernel_settings"

function write_msg {
  message=$1
  date=$(date -u +"%Y-%m-%d %H:%M:%SZ")
  echo -e "[${date}] $message"
}

function redirect_output {
  log_dir=$1
  prefix=$2

  mkdir -p $log_dir
  chown -R vcap:vcap $log_dir

  exec 1>> $log_dir/$prefix.stdout.log
  exec 2>> $log_dir/$prefix.stderr.log
}
log_dir=/var/vcap/sys/log/$JOB_NAME
redirect_output $log_dir $JOB_NAME

function read_actual_parameter_value {
  parameter_name=$1

  # validation
  if [ "x" == "x${parameter_name}" ]
  then
     write_msg "ERROR: No parameter name defined for lookup"
    exit 1
  else
    parameter_value=`sysctl -n ${parameter_name}`
    echo $parameter_value
  fi
}

function set_parameter_value {
  parameter_name=$1
  parameter_value=$2

  # validation
  if [ "x" == "x${parameter_name}" ]
  then
    write_msg "ERROR: No parameter name defined"
    exit 1
  fi
  if [ "x" == "x${parameter_value}" ]
  then
    write_msg "ERROR: No parameter value defined"
    exit 1
  fi

  # setting parameter value if not ok
  actual_parameter_value=`read_actual_parameter_value "$parameter_name"`
  write_msg "${parameter_name} actual: $actual_parameter_value"
  write_msg "${parameter_name} new   : $parameter_value"

  if [ "${actual_parameter_value}" != "${parameter_value}" ]
  then
    new_parameter_value=`/sbin/sysctl -w ${parameter_name}="${parameter_value}"`

    # validation
    if [ $? -ne 0 ]
    then
      write_msg "ERROR: Not able to set kernel parameter: ${parameter_name} with value: ${parameter_value}"
      exit 1
    else
      write_msg "Set kernel parameter:    ${parameter_name} = ${parameter_value}"
    fi
  else
   write_msg "INFO: Kernel parameter is already at the desired value: ${parameter_name} -> ${parameter_value}"
 fi
}

function send_metric {
  parameter_name="$1"
  parameter_value="$2"
  riemann_state="ok"
  riemann_msg="Sending kernel parameter value"

  if [ "x${parameter_value}" == "x" ]
  then
  parameter_value=`read_actual_parameter_value "$parameter_name"`
  fi

  <% if_p("riemann.host") do %>
  write_msg "Sending data to riemann: [$parameter_name : $parameter_value - $riemann_state - $riemann_msg - $JOB_NAME - <%= p("riemann.suffix") %>.<%= spec.deployment %>.<%= spec.job.name %>.<%= spec.index %>]"
  /var/vcap/packages/raidman/bin/raidman -riemannHost <%= p("riemann.host") %> -eventMetric "$parameter_value" -eventState "$riemann_state" -eventMessage "$riemann_msg" -eventHost <%= spec.deployment %> -eventService "<%= p("riemann.suffix") %>.<%= spec.job.name %>.<%= spec.index %>.${JOB_NAME}.${parameter_name}"
  <% end %>
}

# set parameter via sysctl
<% p("kernel_settings.parameters").each do |parameter_config| %>
set_parameter_value <%= parameter_config['name'] %> <%= parameter_config['value'] %>
<% if parameter_config['metric'] %>
send_metric <%= parameter_config['name'] %> ""
<% end %>
<% end %>

# Sending global count of connections in the queue
send_metric connection_queue `netstat -an | grep -c SYN_RECV`
